// Code generated by candi v1.14.3.

package usecase

import (
	"sync"

	// @candi:usecaseImport
	monitoringusecase "PLTD3/internal/modules/monitoring/usecase"
	kpiusecase "PLTD3/internal/modules/kpi/usecase"
	distributionusecase "PLTD3/internal/modules/distribution/usecase"
	consumptionusecase "PLTD3/internal/modules/consumption/usecase"
	businessusecase "PLTD3/internal/modules/business/usecase"
	"PLTD3/pkg/shared/usecase/common"

	"github.com/golangid/candi/codebase/factory/dependency"
)

type (
	// Usecase unit of work for all usecase in modules
	Usecase interface {
		// @candi:usecaseMethod
		Monitoring() monitoringusecase.MonitoringUsecase
		Kpi() kpiusecase.KpiUsecase
		Distribution() distributionusecase.DistributionUsecase
		Consumption() consumptionusecase.ConsumptionUsecase
		Business() businessusecase.BusinessUsecase
	}

	usecaseUow struct {
		// @candi:usecaseField
		monitoringusecase.MonitoringUsecase
		kpiusecase.KpiUsecase
		distributionusecase.DistributionUsecase
		consumptionusecase.ConsumptionUsecase
		businessusecase.BusinessUsecase
	}
)

var usecaseInst *usecaseUow
var once sync.Once

// SetSharedUsecase set singleton usecase unit of work instance
func SetSharedUsecase(deps dependency.Dependency) {
	once.Do(func() {
		usecaseInst = new(usecaseUow)
		var setSharedUsecaseFuncs []func(common.Usecase)
		var setSharedUsecaseFunc func(common.Usecase)

		// @candi:usecaseCommon
		usecaseInst.MonitoringUsecase, setSharedUsecaseFunc = monitoringusecase.NewMonitoringUsecase(deps)
		setSharedUsecaseFuncs = append(setSharedUsecaseFuncs, setSharedUsecaseFunc)
		usecaseInst.KpiUsecase, setSharedUsecaseFunc = kpiusecase.NewKpiUsecase(deps)
		setSharedUsecaseFuncs = append(setSharedUsecaseFuncs, setSharedUsecaseFunc)
		usecaseInst.DistributionUsecase, setSharedUsecaseFunc = distributionusecase.NewDistributionUsecase(deps)
		setSharedUsecaseFuncs = append(setSharedUsecaseFuncs, setSharedUsecaseFunc)
		usecaseInst.ConsumptionUsecase, setSharedUsecaseFunc = consumptionusecase.NewConsumptionUsecase(deps)
		setSharedUsecaseFuncs = append(setSharedUsecaseFuncs, setSharedUsecaseFunc)
		usecaseInst.BusinessUsecase, setSharedUsecaseFunc = businessusecase.NewBusinessUsecase(deps)
		setSharedUsecaseFuncs = append(setSharedUsecaseFuncs, setSharedUsecaseFunc)

		sharedUsecase := common.SetCommonUsecase(usecaseInst)
		for _, setFunc := range setSharedUsecaseFuncs {
			setFunc(sharedUsecase)
		}
	})
}

// GetSharedUsecase get usecase unit of work instance
func GetSharedUsecase() Usecase {
	return usecaseInst
}

// @candi:usecaseImplementation
func (uc *usecaseUow) Monitoring() monitoringusecase.MonitoringUsecase {
	return uc.MonitoringUsecase
}

func (uc *usecaseUow) Kpi() kpiusecase.KpiUsecase {
	return uc.KpiUsecase
}

func (uc *usecaseUow) Distribution() distributionusecase.DistributionUsecase {
	return uc.DistributionUsecase
}

func (uc *usecaseUow) Consumption() consumptionusecase.ConsumptionUsecase {
	return uc.ConsumptionUsecase
}

func (uc *usecaseUow) Business() businessusecase.BusinessUsecase {
	return uc.BusinessUsecase
}

