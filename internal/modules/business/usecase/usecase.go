// Code generated by candi v1.14.3.

package usecase

import (
	"context"

	"PLTD3/internal/modules/business/domain"
	"PLTD3/pkg/shared/repository"
	"PLTD3/pkg/shared/usecase/common"

	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/factory/types"
	"github.com/golangid/candi/codebase/interfaces"
)

// BusinessUsecase abstraction
type BusinessUsecase interface {
	GetAllBusiness(ctx context.Context, filter *domain.FilterBusiness) (data []domain.ResponseBusiness, meta candishared.Meta, err error)
	GetConditionUnit(ctx context.Context, filter *domain.FilterBusiness) (data []domain.ResponseBusinessCondition, err error)

	// Report
	GetBusinessReport(ctx context.Context, filter *domain.FilterBusiness) (data []domain.ResponseBusinessReport, meta candishared.Meta, err error)

	// hapus bila tidak perlu
	GetDetailBusiness(ctx context.Context, id string) (data domain.ResponseBusiness, err error)
	CreateBusiness(ctx context.Context, data *domain.RequestBusiness) (err error)
	UpdateBusiness(ctx context.Context, data *domain.RequestBusiness) (err error)
	DeleteBusiness(ctx context.Context, id string) (err error)
}

type businessUsecaseImpl struct {
	sharedUsecase common.Usecase
	cache         interfaces.Cache
	repoSQL       repository.RepoSQL
	// repoMongo     repository.RepoMongo
	kafkaPub       interfaces.Publisher
}

// NewBusinessUsecase usecase impl constructor
func NewBusinessUsecase(deps dependency.Dependency) (BusinessUsecase, func(sharedUsecase common.Usecase)) {
	uc := &businessUsecaseImpl{
		repoSQL:   repository.GetSharedRepoSQL(),
		// repoMongo: repository.GetSharedRepoMongo(),
	}
	if redisPool := deps.GetRedisPool(); redisPool != nil {
		uc.cache = redisPool.Cache()
	}
	if kafkaBroker := deps.GetBroker(types.Kafka); kafkaBroker != nil {
		uc.kafkaPub = kafkaBroker.GetPublisher()
	}
	return uc, func(sharedUsecase common.Usecase) {
		uc.sharedUsecase = sharedUsecase
	}
}
