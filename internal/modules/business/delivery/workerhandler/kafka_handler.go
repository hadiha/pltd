// Code generated by candi v1.14.3.

package workerhandler

import (
	"fmt"

	"PLTD3/pkg/shared/usecase"

	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/factory/types"
	"github.com/golangid/candi/codebase/interfaces"
	"github.com/golangid/candi/tracer"
)

// KafkaHandler struct
type KafkaHandler struct {
	uc        usecase.Usecase
	validator interfaces.Validator
}

// NewKafkaHandler constructor
func NewKafkaHandler(uc usecase.Usecase, deps dependency.Dependency) *KafkaHandler {
	return &KafkaHandler{
		uc:        uc,
		validator: deps.GetValidator(),
	}
}

// MountHandlers mount handler group
func (h *KafkaHandler) MountHandlers(group *types.WorkerHandlerGroup) {
	group.Add("business", h.handleBusiness) // handling topic "business"
}

// ProcessMessage from kafka consumer
func (h *KafkaHandler) handleBusiness(eventContext *candishared.EventContext) error {
	trace, _ := tracer.StartTraceWithContext(eventContext.Context(), "BusinessDeliveryKafka:HandleBusiness")
	defer trace.Finish()

	fmt.Printf("message consumed in handler %s. key: %s, message: %s\n", eventContext.HandlerRoute(), eventContext.Key(), eventContext.Message())

	// exec usecase
	// h.uc.SomethingUsecase()

	return nil
}
