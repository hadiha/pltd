// Code generated by candi v1.14.3.

package resthandler

import (
	"encoding/json"
	"io"
	"net/http"

	"github.com/labstack/echo"

	"PLTD3/internal/modules/consumption/domain"
	"PLTD3/pkg/shared/usecase"

	"github.com/golangid/candi/candihelper"
	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/interfaces"
	"github.com/golangid/candi/tracer"
	"github.com/golangid/candi/wrapper"
)

// RestHandler handler
type RestHandler struct {
	mw        interfaces.Middleware
	uc        usecase.Usecase
	validator interfaces.Validator
}

// NewRestHandler create new rest handler
func NewRestHandler(uc usecase.Usecase, deps dependency.Dependency) *RestHandler {
	return &RestHandler{
		uc: uc, mw: deps.GetMiddleware(), validator: deps.GetValidator(),
	}
}

// Mount handler with root "/"
// handling version in here
func (h *RestHandler) Mount(root *echo.Group) {
	v1Root := root.Group(candihelper.V1)

	consumption := v1Root.Group("/consumption", echo.WrapMiddleware(h.mw.HTTPBearerAuth))
	consumption.GET("", h.getAllConsumption, echo.WrapMiddleware(h.mw.HTTPPermissionACL("getAllConsumption")))


	// hapus jika tidak perlu
	// consumption.GET("/:id", h.getDetailConsumptionByID, echo.WrapMiddleware(h.mw.HTTPPermissionACL("getDetailConsumption")))
	// consumption.POST("", h.createConsumption, echo.WrapMiddleware(h.mw.HTTPPermissionACL("createConsumption")))
	// consumption.PUT("/:id", h.updateConsumption, echo.WrapMiddleware(h.mw.HTTPPermissionACL("updateConsumption")))
	// consumption.DELETE("/:id", h.deleteConsumption, echo.WrapMiddleware(h.mw.HTTPPermissionACL("deleteConsumption")))
}

func (h *RestHandler) getAllConsumption(c echo.Context) error {
	trace, ctx := tracer.StartTraceWithContext(c.Request().Context(), "ConsumptionDeliveryREST:GetAllConsumption")
	defer trace.Finish()

	tokenClaim := candishared.ParseTokenClaimFromContext(ctx) // must using HTTPBearerAuth in middleware for this handler

	var filter domain.FilterConsumption
	if err := candihelper.ParseFromQueryParam(c.Request().URL.Query(), &filter); err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed parse filter", err).JSON(c.Response())
	}

	// ini dikomen dlu
	// if err := h.validator.ValidateDocument("consumption/get_all", filter); err != nil {
	// 	return wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate filter", err).JSON(c.Response())
	// }

	data, meta, err := h.uc.Consumption().GetAllConsumption(ctx, &filter)
	if err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	message := "Success, with your user id (" + tokenClaim.Subject + ") and role (" + tokenClaim.Role + ")"
	return wrapper.NewHTTPResponse(http.StatusOK, message, meta, data).JSON(c.Response())
}

func (h *RestHandler) getDetailConsumptionByID(c echo.Context) error {
	trace, ctx := tracer.StartTraceWithContext(c.Request().Context(), "ConsumptionDeliveryREST:GetDetailConsumptionByID")
	defer trace.Finish()

	data, err := h.uc.Consumption().GetDetailConsumption(ctx, c.Param("id"))
	if err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	return wrapper.NewHTTPResponse(http.StatusOK, "Success", data).JSON(c.Response())
}

func (h *RestHandler) createConsumption(c echo.Context) error {
	trace, ctx := tracer.StartTraceWithContext(c.Request().Context(), "ConsumptionDeliveryREST:CreateConsumption")
	defer trace.Finish()

	body, _ := io.ReadAll(c.Request().Body)
	if err := h.validator.ValidateDocument("consumption/save", body); err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate payload", err).JSON(c.Response())
	}

	var payload domain.RequestConsumption
	if err := json.Unmarshal(body, &payload); err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	err := h.uc.Consumption().CreateConsumption(ctx, &payload)
	if err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	return wrapper.NewHTTPResponse(http.StatusCreated, "Success").JSON(c.Response())
}

func (h *RestHandler) updateConsumption(c echo.Context) error {
	trace, ctx := tracer.StartTraceWithContext(c.Request().Context(), "ConsumptionDeliveryREST:UpdateConsumption")
	defer trace.Finish()

	body, _ := io.ReadAll(c.Request().Body)
	if err := h.validator.ValidateDocument("consumption/save", body); err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate payload", err).JSON(c.Response())
	}

	var payload domain.RequestConsumption
	if err := json.Unmarshal(body, &payload); err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	payload.ID = c.Param("id")
	err := h.uc.Consumption().UpdateConsumption(ctx, &payload)
	if err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	return wrapper.NewHTTPResponse(http.StatusOK, "Success").JSON(c.Response())
}

func (h *RestHandler) deleteConsumption(c echo.Context) error {
	trace, ctx := tracer.StartTraceWithContext(c.Request().Context(), "ConsumptionDeliveryREST:DeleteConsumption")
	defer trace.Finish()

	if err := h.uc.Consumption().DeleteConsumption(ctx, c.Param("id")); err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	return wrapper.NewHTTPResponse(http.StatusOK, "Success").JSON(c.Response())
}
