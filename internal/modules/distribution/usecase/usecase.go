// Code generated by candi v1.14.3.

package usecase

import (
	"context"

	"PLTD3/internal/modules/distribution/domain"
	"PLTD3/pkg/shared/repository"
	"PLTD3/pkg/shared/usecase/common"

	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/factory/types"
	"github.com/golangid/candi/codebase/interfaces"
)

// DistributionUsecase abstraction
type DistributionUsecase interface {
	GetAllDistribution(ctx context.Context, filter *domain.FilterDistribution) (data []domain.ResponseDistribution, meta candishared.Meta, err error)
	GetDistributionByInstansi(ctx context.Context, instansi string, filter *domain.FilterDistribution) (data []domain.ResponseDistribution, meta candishared.Meta, err error)
	GetSumDistribution(ctx context.Context, filter *domain.FilterDistribution) (data domain.ResponseSumDistribution, err error)
	
	// PETA
	GetMapsDistribution(ctx context.Context, filter *domain.FilterDistribution) (data []domain.ResponseMapsDistribution, err error)

	// hapus jika tidka perlu
	GetDetailDistribution(ctx context.Context, id string) (data domain.ResponseDistribution, err error)
	CreateDistribution(ctx context.Context, data *domain.RequestDistribution) (err error)
	UpdateDistribution(ctx context.Context, data *domain.RequestDistribution) (err error)
	DeleteDistribution(ctx context.Context, id string) (err error)
}

type distributionUsecaseImpl struct {
	sharedUsecase common.Usecase
	cache         interfaces.Cache
	repoSQL       repository.RepoSQL
	// repoMongo     repository.RepoMongo
	kafkaPub       interfaces.Publisher
}

// NewDistributionUsecase usecase impl constructor
func NewDistributionUsecase(deps dependency.Dependency) (DistributionUsecase, func(sharedUsecase common.Usecase)) {
	uc := &distributionUsecaseImpl{
		repoSQL:   repository.GetSharedRepoSQL(),
		// repoMongo: repository.GetSharedRepoMongo(),
	}
	if redisPool := deps.GetRedisPool(); redisPool != nil {
		uc.cache = redisPool.Cache()
	}
	if kafkaBroker := deps.GetBroker(types.Kafka); kafkaBroker != nil {
		uc.kafkaPub = kafkaBroker.GetPublisher()
	}
	return uc, func(sharedUsecase common.Usecase) {
		uc.sharedUsecase = sharedUsecase
	}
}
