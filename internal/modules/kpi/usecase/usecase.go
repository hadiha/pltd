// Code generated by candi v1.14.3.

package usecase

import (
	"context"

	"PLTD3/internal/modules/kpi/domain"
	"PLTD3/pkg/shared/repository"
	"PLTD3/pkg/shared/usecase/common"

	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/factory/types"
	"github.com/golangid/candi/codebase/interfaces"
)

// KpiUsecase abstraction
type KpiUsecase interface {
	GetAllKpi(ctx context.Context, filter *domain.FilterKpi) (data []domain.ResponseKpi, meta candishared.Meta, err error)
	GetKpiEaf(ctx context.Context, filter *domain.FilterKpi) (data []domain.ResponseKpi, meta candishared.Meta, err error)
	
	
	
	
	
	GetDetailKpi(ctx context.Context, id string) (data domain.ResponseKpi, err error)
	CreateKpi(ctx context.Context, data *domain.RequestKpi) (err error)
	UpdateKpi(ctx context.Context, data *domain.RequestKpi) (err error)
	DeleteKpi(ctx context.Context, id string) (err error)
}

type kpiUsecaseImpl struct {
	sharedUsecase common.Usecase
	cache         interfaces.Cache
	repoSQL       repository.RepoSQL
	// repoMongo     repository.RepoMongo
	kafkaPub       interfaces.Publisher
}

// NewKpiUsecase usecase impl constructor
func NewKpiUsecase(deps dependency.Dependency) (KpiUsecase, func(sharedUsecase common.Usecase)) {
	uc := &kpiUsecaseImpl{
		repoSQL:   repository.GetSharedRepoSQL(),
		// repoMongo: repository.GetSharedRepoMongo(),
	}
	if redisPool := deps.GetRedisPool(); redisPool != nil {
		uc.cache = redisPool.Cache()
	}
	if kafkaBroker := deps.GetBroker(types.Kafka); kafkaBroker != nil {
		uc.kafkaPub = kafkaBroker.GetPublisher()
	}
	return uc, func(sharedUsecase common.Usecase) {
		uc.sharedUsecase = sharedUsecase
	}
}
